{"version":3,"file":"select-app.js","sourceRoot":"","sources":["../../../../src/cli/services/app/select-app.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,wBAAwB,EAAE,eAAe,EAAC,MAAM,sBAAsB,CAAA;AAI9E,OAAO,EAA0B,6BAA6B,EAAC,MAAM,8CAA8C,CAAA;AAEnH,OAAO,EAAC,gBAAgB,EAAC,MAAM,gCAAgC,CAAA;AAE/D,MAAM,CAAC,KAAK,UAAU,SAAS;IAC7B,MAAM,uBAAuB,GAAG,6BAA6B,EAAE,CAAA;IAC/D,MAAM,IAAI,GAAG,MAAM,uBAAuB,CAAC,aAAa,EAAE,CAAA;IAC1D,MAAM,GAAG,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAA;IAChD,MAAM,EAAC,IAAI,EAAE,YAAY,EAAC,GAAG,MAAM,uBAAuB,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IAC7E,MAAM,iBAAiB,GAAG,MAAM,eAAe,CAAC,IAAI,EAAE,YAAY,EAAE,GAAG,CAAC,EAAE,EAAE,EAAC,uBAAuB,EAAC,CAAC,CAAA;IACtG,MAAM,eAAe,GAAG,MAAM,uBAAuB,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAA;IAClF,OAAO,eAAgB,CAAA;AACzB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAC/C,MAAc,EACd,uBAAgD,EAChD,cAAwC,EACxC,KAAiB;IAEjB,MAAM,gBAAgB,GAAG,MAAM,uBAAuB,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAA;IAC/E,MAAM,uBAAuB,GAC3B,gBAAgB,CAAC,GAAG,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,MAAM,CAC7D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,UAAU,KAAK,eAAe,CACjE,IAAI,EAAE,CAAA;IACT,OAAO,sCAAsC,CAC3C,uBAAuB,EACvB,cAAc,EACd,KAAK,CAC8B,CAAA;AACvC,CAAC;AAED,MAAM,UAAU,sCAAsC,CACpD,mBAAuC,EACvC,cAAwC,EACxC,KAAiB;IAEjB,IAAI,eAAe,GAA6B,EAAE,CAAA;IAClD,MAAM,oBAAoB,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK,eAAe,CAAC,CAAA;IACjG,mBAAmB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QACrC,MAAM,UAAU,GAAG,oBAAoB,CAAC,IAAI,CAC1C,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC,WAAW,EAAE,CAC7E,CAAA;QACD,IAAI,CAAC,UAAU;YAAE,OAAM;QACvB,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAA;QAClC,IAAI,CAAC,YAAY;YAAE,OAAM;QACzB,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QAE3D,eAAe,GAAG,gBAAgB,CAAC,eAAe,EAAE,UAAU,CAAC,gBAAgB,EAAE,CAAC,MAAM,EAAE,EAAC,KAAK,EAAC,CAAC,IAAI,MAAM,CAAC,CAAA;IAC/G,CAAC,CAAC,CAAA;IACF,OAAO,EAAC,GAAG,eAAe,EAAC,CAAA;AAC7B,CAAC","sourcesContent":["import {OrganizationApp} from '../../models/organization.js'\nimport {selectOrganizationPrompt, selectAppPrompt} from '../../prompts/dev.js'\nimport {BetaFlag} from '../dev/fetch.js'\nimport {ExtensionSpecification} from '../../models/extensions/specification.js'\nimport {AppModuleVersion} from '../../api/graphql/app_active_version.js'\nimport {DeveloperPlatformClient, selectDeveloperPlatformClient} from '../../utilities/developer-platform-client.js'\nimport {SpecsAppConfiguration} from '../../models/extensions/specifications/types/app_config.js'\nimport {deepMergeObjects} from '@shopify/cli-kit/common/object'\n\nexport async function selectApp(): Promise<OrganizationApp> {\n  const developerPlatformClient = selectDeveloperPlatformClient()\n  const orgs = await developerPlatformClient.organizations()\n  const org = await selectOrganizationPrompt(orgs)\n  const {apps, hasMorePages} = await developerPlatformClient.appsForOrg(org.id)\n  const selectedAppApiKey = await selectAppPrompt(apps, hasMorePages, org.id, {developerPlatformClient})\n  const fullSelectedApp = await developerPlatformClient.appFromId(selectedAppApiKey)\n  return fullSelectedApp!\n}\n\nexport async function fetchAppRemoteConfiguration(\n  apiKey: string,\n  developerPlatformClient: DeveloperPlatformClient,\n  specifications: ExtensionSpecification[],\n  betas: BetaFlag[],\n) {\n  const activeAppVersion = await developerPlatformClient.activeAppVersion(apiKey)\n  const appModuleVersionsConfig =\n    activeAppVersion.app.activeAppVersion?.appModuleVersions.filter(\n      (module) => module.specification?.experience === 'configuration',\n    ) || []\n  return remoteAppConfigurationExtensionContent(\n    appModuleVersionsConfig,\n    specifications,\n    betas,\n  ) as unknown as SpecsAppConfiguration\n}\n\nexport function remoteAppConfigurationExtensionContent(\n  configRegistrations: AppModuleVersion[],\n  specifications: ExtensionSpecification[],\n  betas: BetaFlag[],\n) {\n  let remoteAppConfig: {[key: string]: unknown} = {}\n  const configSpecifications = specifications.filter((spec) => spec.experience === 'configuration')\n  configRegistrations.forEach((module) => {\n    const configSpec = configSpecifications.find(\n      (spec) => spec.identifier === module.specification?.identifier.toLowerCase(),\n    )\n    if (!configSpec) return\n    const configString = module.config\n    if (!configString) return\n    const config = configString ? JSON.parse(configString) : {}\n\n    remoteAppConfig = deepMergeObjects(remoteAppConfig, configSpec.reverseTransform?.(config, {betas}) ?? config)\n  })\n  return {...remoteAppConfig}\n}\n"]}