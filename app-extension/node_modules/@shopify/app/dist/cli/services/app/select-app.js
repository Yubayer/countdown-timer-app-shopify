import { selectOrganizationPrompt, selectAppPrompt } from '../../prompts/dev.js';
import { selectDeveloperPlatformClient } from '../../utilities/developer-platform-client.js';
import { deepMergeObjects } from '@shopify/cli-kit/common/object';
export async function selectApp() {
    const developerPlatformClient = selectDeveloperPlatformClient();
    const orgs = await developerPlatformClient.organizations();
    const org = await selectOrganizationPrompt(orgs);
    const { apps, hasMorePages } = await developerPlatformClient.appsForOrg(org.id);
    const selectedAppApiKey = await selectAppPrompt(apps, hasMorePages, org.id, { developerPlatformClient });
    const fullSelectedApp = await developerPlatformClient.appFromId(selectedAppApiKey);
    return fullSelectedApp;
}
export async function fetchAppRemoteConfiguration(apiKey, developerPlatformClient, specifications, betas) {
    const activeAppVersion = await developerPlatformClient.activeAppVersion(apiKey);
    const appModuleVersionsConfig = activeAppVersion.app.activeAppVersion?.appModuleVersions.filter((module) => module.specification?.experience === 'configuration') || [];
    return remoteAppConfigurationExtensionContent(appModuleVersionsConfig, specifications, betas);
}
export function remoteAppConfigurationExtensionContent(configRegistrations, specifications, betas) {
    let remoteAppConfig = {};
    const configSpecifications = specifications.filter((spec) => spec.experience === 'configuration');
    configRegistrations.forEach((module) => {
        const configSpec = configSpecifications.find((spec) => spec.identifier === module.specification?.identifier.toLowerCase());
        if (!configSpec)
            return;
        const configString = module.config;
        if (!configString)
            return;
        const config = configString ? JSON.parse(configString) : {};
        remoteAppConfig = deepMergeObjects(remoteAppConfig, configSpec.reverseTransform?.(config, { betas }) ?? config);
    });
    return { ...remoteAppConfig };
}
//# sourceMappingURL=select-app.js.map