{"version":3,"file":"developer-platform-client.js","sourceRoot":"","sources":["../../../src/cli/utilities/developer-platform-client.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,cAAc,EAAC,MAAM,gDAAgD,CAAA;AAkB7E,MAAM,UAAU,6BAA6B;IAC3C,OAAO,IAAI,cAAc,EAAE,CAAA;AAC7B,CAAC","sourcesContent":["import {PartnersClient} from './developer-platform-client/partners-client.js'\nimport {PartnersSession} from '../../cli/services/context/partner-account-info.js'\nimport {MinimalOrganizationApp, Organization, OrganizationApp, OrganizationStore} from '../models/organization.js'\nimport {ExtensionSpecification} from '../models/extensions/specification.js'\nimport {AllAppExtensionRegistrationsQuerySchema} from '../api/graphql/all_app_extension_registrations.js'\nimport {ActiveAppVersionQuerySchema} from '../api/graphql/app_active_version.js'\nimport {ExtensionUpdateDraftInput, ExtensionUpdateSchema} from '../api/graphql/update_draft.js'\nimport {AppDeploySchema, AppDeployVariables} from '../api/graphql/app_deploy.js'\nimport {\n  GenerateSignedUploadUrlSchema,\n  GenerateSignedUploadUrlVariables,\n} from '../api/graphql/generate_signed_upload_url.js'\nimport {FunctionUploadUrlGenerateResponse} from '@shopify/cli-kit/node/api/partners'\n\nexport type Paginateable<T> = T & {\n  hasMorePages: boolean\n}\n\nexport function selectDeveloperPlatformClient(): DeveloperPlatformClient {\n  return new PartnersClient()\n}\n\nexport interface CreateAppOptions {\n  isLaunchable?: boolean\n  scopesArray?: string[]\n  directory?: string\n}\n\nexport interface DeveloperPlatformClient {\n  session: () => Promise<PartnersSession>\n  refreshToken: () => Promise<string>\n  accountInfo: () => Promise<PartnersSession['accountInfo']>\n  appFromId: (appId: string) => Promise<OrganizationApp | undefined>\n  organizations: () => Promise<Organization[]>\n  selectOrg: () => Promise<Organization>\n  orgFromId: (orgId: string) => Promise<Organization>\n  orgAndApps: (orgId: string) => Promise<Paginateable<{organization: Organization; apps: MinimalOrganizationApp[]}>>\n  appsForOrg: (orgId: string, term?: string) => Promise<Paginateable<{apps: MinimalOrganizationApp[]}>>\n  specifications: (appId: string) => Promise<ExtensionSpecification[]>\n  createApp: (org: Organization, name: string, options?: CreateAppOptions) => Promise<OrganizationApp>\n  devStoresForOrg: (orgId: string) => Promise<OrganizationStore[]>\n  appExtensionRegistrations: (appId: string) => Promise<AllAppExtensionRegistrationsQuerySchema>\n  activeAppVersion: (appId: string) => Promise<ActiveAppVersionQuerySchema>\n  functionUploadUrl: () => Promise<FunctionUploadUrlGenerateResponse>\n  generateSignedUploadUrl: (input: GenerateSignedUploadUrlVariables) => Promise<GenerateSignedUploadUrlSchema>\n  updateExtension: (input: ExtensionUpdateDraftInput) => Promise<ExtensionUpdateSchema>\n  deploy: (input: AppDeployVariables) => Promise<AppDeploySchema>\n}\n"]}