import { CreateAppQuery } from '../../api/graphql/create_app.js';
import { AllDevStoresByOrganizationQuery, } from '../../api/graphql/all_dev_stores_by_org.js';
import { fetchPartnersSession } from '../../../cli/services/context/partner-account-info.js';
import { fetchAppDetailsFromApiKey, fetchOrganizations, fetchOrgAndApps, fetchOrgFromId, filterDisabledBetas, } from '../../../cli/services/dev/fetch.js';
import { selectOrganizationPrompt } from '../../prompts/dev.js';
import { fetchSpecifications } from '../../services/generate/fetch-extension-specifications.js';
import { AllAppExtensionRegistrationsQuery, } from '../../api/graphql/all_app_extension_registrations.js';
import { ActiveAppVersionQuery } from '../../api/graphql/app_active_version.js';
import { ExtensionUpdateDraftMutation, } from '../../api/graphql/update_draft.js';
import { AppDeploy } from '../../api/graphql/app_deploy.js';
import { GenerateSignedUploadUrl, } from '../../api/graphql/generate_signed_upload_url.js';
import { isUnitTest } from '@shopify/cli-kit/node/context/local';
import { AbortError } from '@shopify/cli-kit/node/error';
import { FunctionUploadUrlGenerateMutation, partnersRequest, } from '@shopify/cli-kit/node/api/partners';
import { ensureAuthenticatedPartners } from '@shopify/cli-kit/node/session';
// this is a temporary solution for editions to support https://vault.shopify.io/gsd/projects/31406
// read more here: https://vault.shopify.io/gsd/projects/31406
const MAGIC_URL = 'https://shopify.dev/apps/default-app-home';
const MAGIC_REDIRECT_URL = 'https://shopify.dev/apps/default-app-home/api/auth';
function getAppVars(org, name, isLaunchable = true, scopesArray) {
    if (isLaunchable) {
        return {
            org: parseInt(org.id, 10),
            title: `${name}`,
            appUrl: 'https://example.com',
            redir: ['https://example.com/api/auth'],
            requestedAccessScopes: scopesArray ?? [],
            type: 'undecided',
        };
    }
    else {
        return {
            org: parseInt(org.id, 10),
            title: `${name}`,
            appUrl: MAGIC_URL,
            redir: [MAGIC_REDIRECT_URL],
            requestedAccessScopes: [],
            type: 'undecided',
        };
    }
}
export class PartnersClient {
    constructor(session) {
        this._session = session;
    }
    async session() {
        if (!this._session) {
            if (isUnitTest()) {
                throw new Error('PartnersClient.session() should not be invoked dynamically in a unit test');
            }
            this._session = await fetchPartnersSession();
        }
        return this._session;
    }
    async makeRequest(query, variables = undefined) {
        return partnersRequest(query, await this.token(), variables);
    }
    async token() {
        return (await this.session()).token;
    }
    async refreshToken() {
        const newToken = await ensureAuthenticatedPartners([], process.env, { noPrompt: true });
        const session = await this.session();
        if (newToken) {
            session.token = newToken;
        }
        return session.token;
    }
    async accountInfo() {
        return (await this.session()).accountInfo;
    }
    async appFromId(appId) {
        return fetchAppDetailsFromApiKey(appId, await this.token());
    }
    async organizations() {
        return fetchOrganizations(await this.session());
    }
    async selectOrg() {
        const organizations = await this.organizations();
        return selectOrganizationPrompt(organizations);
    }
    async orgFromId(orgId) {
        return fetchOrgFromId(orgId, await this.session());
    }
    async orgAndApps(orgId) {
        const result = await fetchOrgAndApps(orgId, await this.session());
        return {
            organization: result.organization,
            apps: result.apps.nodes,
            hasMorePages: result.apps.pageInfo.hasNextPage,
        };
    }
    async appsForOrg(organizationId, term) {
        const result = await fetchOrgAndApps(organizationId, await this.session(), term);
        return {
            apps: result.apps.nodes,
            hasMorePages: result.apps.pageInfo.hasNextPage,
        };
    }
    async specifications(appId) {
        return fetchSpecifications({ token: await this.token(), apiKey: appId });
    }
    async createApp(org, name, options) {
        const variables = getAppVars(org, name, options?.isLaunchable, options?.scopesArray);
        const result = await this.makeRequest(CreateAppQuery, variables);
        if (result.appCreate.userErrors.length > 0) {
            const errors = result.appCreate.userErrors.map((error) => error.message).join(', ');
            throw new AbortError(errors);
        }
        const betas = filterDisabledBetas(result.appCreate.app.disabledBetas);
        return { ...result.appCreate.app, organizationId: org.id, newApp: true, betas };
    }
    async devStoresForOrg(orgId) {
        const result = await this.makeRequest(AllDevStoresByOrganizationQuery, {
            id: orgId,
        });
        return result.organizations.nodes[0].stores.nodes;
    }
    async appExtensionRegistrations(appId) {
        return this.makeRequest(AllAppExtensionRegistrationsQuery, { apiKey: appId });
    }
    async activeAppVersion(appId) {
        return this.makeRequest(ActiveAppVersionQuery, { apiKey: appId });
    }
    async functionUploadUrl() {
        return this.makeRequest(FunctionUploadUrlGenerateMutation);
    }
    async updateExtension(extensionInput) {
        return this.makeRequest(ExtensionUpdateDraftMutation, extensionInput);
    }
    async deploy(deployInput) {
        return this.makeRequest(AppDeploy, deployInput);
    }
    async generateSignedUploadUrl(input) {
        return this.makeRequest(GenerateSignedUploadUrl, input);
    }
}
//# sourceMappingURL=partners-client.js.map